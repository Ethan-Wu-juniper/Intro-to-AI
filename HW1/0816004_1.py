# -*- coding: utf-8 -*-
"""0000000_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A0MrZqwpIKfWKGrS_Hcd4YDI7dCpKuoD

# Artificial Intelligence - Assignment 1

## 1. Description

In this assignment, you are going to solve the 8-puzzle using any algorithm. The `EightPuzzle` class is written and provided by TAs, you don't need to implement the puzzle yourself, just import and use.

## 2. How to use `EightPuzzle`

```python
from eight_puzzle import EightPuzzle # import

puzzle = EightPuzzle()

puzzle.init()     # initialize a solvable puzzle state
puzzle.init(seed) # initialize a solvable puzzle state using a seed
print(puzzle)     # show current puzzle state

# move
puzzle.move('up')
puzzle.move('down')
puzzle.move('left')
puzzle.move('right')

if puzzle.state == puzzle.FINAL_STATE:
  print('You have solved the puzzle')

# Useful: get the next state after you move in a direction,
# this won't change the internal state of EightPuzzle.
state_after_move_up = puzzle.get_state_after_move(current_state, 'up')

```
"""

# NOTE: PLEASE KEEP THIS CELL AND DO NOT MODIFY!

# download eight_puzzle.py (YOU SHOULD NOT MODIFY eight_puzzle.py)
!wget https://lab.djosix.com/eight_puzzle.py -qO eight_puzzle.py
!sha1sum eight_puzzle.py

from eight_puzzle import EightPuzzle, test

"""## 3. Implement a search algorithm to solve 8-puzzle"""

def solve(p):
    '''Solve the given 8-puzzle and return a list of moves.

    Args:
      puzzle (EightPuzzle): an EightPuzzle object.

    Returns:
      list: a list containing each move direction, for example:
            ['up', 'down', 'left', 'left', ...]
    '''

    # YOUR CODE HERE
    map = [[2,2],[0,0],[0,1],[0,2],[1,0],[1,1],[1,2],[2,0],[2,1]]
    prestate = list()
    step = list()
    open = dict()
    path = dict()
    initial = p.state
    cur_state = p.state
    g = 0
    while cur_state != p.FINAL_STATE:
      g += 1
      #print(g,cur_state)
      prestate.append(cur_state)
      for action in p.DIRECTIONS:
        next_state = p.get_state_after_move(cur_state,action)
        if next_state == None or next_state in prestate:
          #print("problem ",action,next_state)
          continue
        else:
          heu = 0
          for i in range(9):
             if next_state[i] != p.FINAL_STATE[i]:
               heu += abs(i//3 - map[next_state[i]][0]) + abs(i%3 - map[next_state[i]][1])
          open[heu] = next_state
          path[next_state] = (cur_state,action)
      min = 1e9
      for key in open.keys():
        if key < min:
          min = key
          cur_state = open[key]
      del open[min]
      #print(act)
      #step.append(act)
    while cur_state != initial:
      step.append(path[cur_state][1])
      cur_state = path[cur_state][0]
    step.reverse()
    return step
    #return ['up', 'down', 'left', 'left', ...] # example

"""## 4. Test your algorithm"""

# NOTE: PLEASE KEEP THIS CELL AND DO NOT MODIFY!

results = test(solve, seed=123, n=10)

"""## 5. Submitting your assignment


1. You have to save 2 files:
  
  - Click "File" > "Download .ipynb" to download `XXXXXXX_1.ipynb`
  - Click "File" > "Download .py" to download `XXXXXXX_1.py`
  
  where `XXXXXXX` is your student ID.  

2. Compress these 2 files into a `.zip` file named `XXXXXXX_1.zip`.

3. Upload the zip file to E3.

> **NOTE: You should click "Runtime" > "Restart and run all" before submitting to E3 to check if your program is able to run without any exception.**
"""